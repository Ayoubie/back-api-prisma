// Code generated by Prisma (prisma@1.34.12). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  filter: (where?: FilterWhereInput) => Promise<boolean>;
  item: (where?: ItemWhereInput) => Promise<boolean>;
  menu: (where?: MenuWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  payment: (where?: PaymentWhereInput) => Promise<boolean>;
  restaurant: (where?: RestaurantWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  filter: (where: FilterWhereUniqueInput) => FilterNullablePromise;
  filters: (args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Filter>;
  filtersConnection: (args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FilterConnectionPromise;
  item: (where: ItemWhereUniqueInput) => ItemNullablePromise;
  items: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Item>;
  itemsConnection: (args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ItemConnectionPromise;
  menu: (where: MenuWhereUniqueInput) => MenuNullablePromise;
  menus: (args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Menu>;
  menusConnection: (args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MenuConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  payment: (where: PaymentWhereUniqueInput) => PaymentNullablePromise;
  payments: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Payment>;
  paymentsConnection: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PaymentConnectionPromise;
  restaurant: (where: RestaurantWhereUniqueInput) => RestaurantNullablePromise;
  restaurants: (args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Restaurant>;
  restaurantsConnection: (args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RestaurantConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createFilter: (data: FilterCreateInput) => FilterPromise;
  updateFilter: (args: {
    data: FilterUpdateInput;
    where: FilterWhereUniqueInput;
  }) => FilterPromise;
  updateManyFilters: (args: {
    data: FilterUpdateManyMutationInput;
    where?: FilterWhereInput;
  }) => BatchPayloadPromise;
  upsertFilter: (args: {
    where: FilterWhereUniqueInput;
    create: FilterCreateInput;
    update: FilterUpdateInput;
  }) => FilterPromise;
  deleteFilter: (where: FilterWhereUniqueInput) => FilterPromise;
  deleteManyFilters: (where?: FilterWhereInput) => BatchPayloadPromise;
  createItem: (data: ItemCreateInput) => ItemPromise;
  updateItem: (args: {
    data: ItemUpdateInput;
    where: ItemWhereUniqueInput;
  }) => ItemPromise;
  updateManyItems: (args: {
    data: ItemUpdateManyMutationInput;
    where?: ItemWhereInput;
  }) => BatchPayloadPromise;
  upsertItem: (args: {
    where: ItemWhereUniqueInput;
    create: ItemCreateInput;
    update: ItemUpdateInput;
  }) => ItemPromise;
  deleteItem: (where: ItemWhereUniqueInput) => ItemPromise;
  deleteManyItems: (where?: ItemWhereInput) => BatchPayloadPromise;
  createMenu: (data: MenuCreateInput) => MenuPromise;
  updateMenu: (args: {
    data: MenuUpdateInput;
    where: MenuWhereUniqueInput;
  }) => MenuPromise;
  updateManyMenus: (args: {
    data: MenuUpdateManyMutationInput;
    where?: MenuWhereInput;
  }) => BatchPayloadPromise;
  upsertMenu: (args: {
    where: MenuWhereUniqueInput;
    create: MenuCreateInput;
    update: MenuUpdateInput;
  }) => MenuPromise;
  deleteMenu: (where: MenuWhereUniqueInput) => MenuPromise;
  deleteManyMenus: (where?: MenuWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createPayment: (data: PaymentCreateInput) => PaymentPromise;
  updatePayment: (args: {
    data: PaymentUpdateInput;
    where: PaymentWhereUniqueInput;
  }) => PaymentPromise;
  updateManyPayments: (args: {
    data: PaymentUpdateManyMutationInput;
    where?: PaymentWhereInput;
  }) => BatchPayloadPromise;
  upsertPayment: (args: {
    where: PaymentWhereUniqueInput;
    create: PaymentCreateInput;
    update: PaymentUpdateInput;
  }) => PaymentPromise;
  deletePayment: (where: PaymentWhereUniqueInput) => PaymentPromise;
  deleteManyPayments: (where?: PaymentWhereInput) => BatchPayloadPromise;
  createRestaurant: (data: RestaurantCreateInput) => RestaurantPromise;
  updateRestaurant: (args: {
    data: RestaurantUpdateInput;
    where: RestaurantWhereUniqueInput;
  }) => RestaurantPromise;
  updateManyRestaurants: (args: {
    data: RestaurantUpdateManyMutationInput;
    where?: RestaurantWhereInput;
  }) => BatchPayloadPromise;
  upsertRestaurant: (args: {
    where: RestaurantWhereUniqueInput;
    create: RestaurantCreateInput;
    update: RestaurantUpdateInput;
  }) => RestaurantPromise;
  deleteRestaurant: (where: RestaurantWhereUniqueInput) => RestaurantPromise;
  deleteManyRestaurants: (where?: RestaurantWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  filter: (
    where?: FilterSubscriptionWhereInput
  ) => FilterSubscriptionPayloadSubscription;
  item: (
    where?: ItemSubscriptionWhereInput
  ) => ItemSubscriptionPayloadSubscription;
  menu: (
    where?: MenuSubscriptionWhereInput
  ) => MenuSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  payment: (
    where?: PaymentSubscriptionWhereInput
  ) => PaymentSubscriptionPayloadSubscription;
  restaurant: (
    where?: RestaurantSubscriptionWhereInput
  ) => RestaurantSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "CUSTOMER" | "RESTORER";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC";

export type MenuOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "price_ASC"
  | "price_DESC";

export type RestaurantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "created_ASC"
  | "created_DESC";

export type ItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "price_ASC"
  | "price_DESC";

export type FilterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "birthday_ASC"
  | "birthday_DESC"
  | "telephone_ASC"
  | "telephone_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "created_ASC"
  | "created_DESC";

export type PaymentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "status_ASC"
  | "status_DESC"
  | "type_ASC"
  | "type_DESC"
  | "codePayment_ASC"
  | "codePayment_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  telephone?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  menus_every?: Maybe<MenuWhereInput>;
  menus_some?: Maybe<MenuWhereInput>;
  menus_none?: Maybe<MenuWhereInput>;
  items_every?: Maybe<ItemWhereInput>;
  items_some?: Maybe<ItemWhereInput>;
  items_none?: Maybe<ItemWhereInput>;
  customer?: Maybe<CustomerWhereInput>;
  payment?: Maybe<PaymentWhereInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface MenuWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  restaurants_every?: Maybe<RestaurantWhereInput>;
  restaurants_some?: Maybe<RestaurantWhereInput>;
  restaurants_none?: Maybe<RestaurantWhereInput>;
  filters_every?: Maybe<FilterWhereInput>;
  filters_some?: Maybe<FilterWhereInput>;
  filters_none?: Maybe<FilterWhereInput>;
  AND?: Maybe<MenuWhereInput[] | MenuWhereInput>;
  OR?: Maybe<MenuWhereInput[] | MenuWhereInput>;
  NOT?: Maybe<MenuWhereInput[] | MenuWhereInput>;
}

export interface RestaurantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  created?: Maybe<Boolean>;
  created_not?: Maybe<Boolean>;
  menus_every?: Maybe<MenuWhereInput>;
  menus_some?: Maybe<MenuWhereInput>;
  menus_none?: Maybe<MenuWhereInput>;
  items_every?: Maybe<ItemWhereInput>;
  items_some?: Maybe<ItemWhereInput>;
  items_none?: Maybe<ItemWhereInput>;
  filters_every?: Maybe<FilterWhereInput>;
  filters_some?: Maybe<FilterWhereInput>;
  filters_none?: Maybe<FilterWhereInput>;
  AND?: Maybe<RestaurantWhereInput[] | RestaurantWhereInput>;
  OR?: Maybe<RestaurantWhereInput[] | RestaurantWhereInput>;
  NOT?: Maybe<RestaurantWhereInput[] | RestaurantWhereInput>;
}

export interface ItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  restaurants_every?: Maybe<RestaurantWhereInput>;
  restaurants_some?: Maybe<RestaurantWhereInput>;
  restaurants_none?: Maybe<RestaurantWhereInput>;
  filters_every?: Maybe<FilterWhereInput>;
  filters_some?: Maybe<FilterWhereInput>;
  filters_none?: Maybe<FilterWhereInput>;
  AND?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  OR?: Maybe<ItemWhereInput[] | ItemWhereInput>;
  NOT?: Maybe<ItemWhereInput[] | ItemWhereInput>;
}

export interface FilterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  items_every?: Maybe<ItemWhereInput>;
  items_some?: Maybe<ItemWhereInput>;
  items_none?: Maybe<ItemWhereInput>;
  menus_every?: Maybe<MenuWhereInput>;
  menus_some?: Maybe<MenuWhereInput>;
  menus_none?: Maybe<MenuWhereInput>;
  restaurants_every?: Maybe<RestaurantWhereInput>;
  restaurants_some?: Maybe<RestaurantWhereInput>;
  restaurants_none?: Maybe<RestaurantWhereInput>;
  AND?: Maybe<FilterWhereInput[] | FilterWhereInput>;
  OR?: Maybe<FilterWhereInput[] | FilterWhereInput>;
  NOT?: Maybe<FilterWhereInput[] | FilterWhereInput>;
}

export interface CustomerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  first_name?: Maybe<String>;
  first_name_not?: Maybe<String>;
  first_name_in?: Maybe<String[] | String>;
  first_name_not_in?: Maybe<String[] | String>;
  first_name_lt?: Maybe<String>;
  first_name_lte?: Maybe<String>;
  first_name_gt?: Maybe<String>;
  first_name_gte?: Maybe<String>;
  first_name_contains?: Maybe<String>;
  first_name_not_contains?: Maybe<String>;
  first_name_starts_with?: Maybe<String>;
  first_name_not_starts_with?: Maybe<String>;
  first_name_ends_with?: Maybe<String>;
  first_name_not_ends_with?: Maybe<String>;
  last_name?: Maybe<String>;
  last_name_not?: Maybe<String>;
  last_name_in?: Maybe<String[] | String>;
  last_name_not_in?: Maybe<String[] | String>;
  last_name_lt?: Maybe<String>;
  last_name_lte?: Maybe<String>;
  last_name_gt?: Maybe<String>;
  last_name_gte?: Maybe<String>;
  last_name_contains?: Maybe<String>;
  last_name_not_contains?: Maybe<String>;
  last_name_starts_with?: Maybe<String>;
  last_name_not_starts_with?: Maybe<String>;
  last_name_ends_with?: Maybe<String>;
  last_name_not_ends_with?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  birthday_not?: Maybe<DateTimeInput>;
  birthday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  birthday_lt?: Maybe<DateTimeInput>;
  birthday_lte?: Maybe<DateTimeInput>;
  birthday_gt?: Maybe<DateTimeInput>;
  birthday_gte?: Maybe<DateTimeInput>;
  telephone?: Maybe<String>;
  telephone_not?: Maybe<String>;
  telephone_in?: Maybe<String[] | String>;
  telephone_not_in?: Maybe<String[] | String>;
  telephone_lt?: Maybe<String>;
  telephone_lte?: Maybe<String>;
  telephone_gt?: Maybe<String>;
  telephone_gte?: Maybe<String>;
  telephone_contains?: Maybe<String>;
  telephone_not_contains?: Maybe<String>;
  telephone_starts_with?: Maybe<String>;
  telephone_not_starts_with?: Maybe<String>;
  telephone_ends_with?: Maybe<String>;
  telephone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  created?: Maybe<Boolean>;
  created_not?: Maybe<Boolean>;
  orders_every?: Maybe<OrderWhereInput>;
  orders_some?: Maybe<OrderWhereInput>;
  orders_none?: Maybe<OrderWhereInput>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  OR?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  NOT?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export interface PaymentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  codePayment?: Maybe<String>;
  codePayment_not?: Maybe<String>;
  codePayment_in?: Maybe<String[] | String>;
  codePayment_not_in?: Maybe<String[] | String>;
  codePayment_lt?: Maybe<String>;
  codePayment_lte?: Maybe<String>;
  codePayment_gt?: Maybe<String>;
  codePayment_gte?: Maybe<String>;
  codePayment_contains?: Maybe<String>;
  codePayment_not_contains?: Maybe<String>;
  codePayment_starts_with?: Maybe<String>;
  codePayment_not_starts_with?: Maybe<String>;
  codePayment_ends_with?: Maybe<String>;
  codePayment_not_ends_with?: Maybe<String>;
  order?: Maybe<OrderWhereInput>;
  AND?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  OR?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  NOT?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
}

export type FilterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type ItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MenuWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PaymentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  codePayment?: Maybe<String>;
}>;

export type RestaurantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface CustomerCreateInput {
  id?: Maybe<ID_Input>;
  first_name: String;
  last_name: String;
  birthday: DateTimeInput;
  telephone: String;
  email: String;
  password: String;
  role?: Maybe<Role>;
  created?: Maybe<Boolean>;
  orders?: Maybe<OrderCreateManyWithoutCustomerInput>;
}

export interface OrderCreateManyWithoutCustomerInput {
  create?: Maybe<
    OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput
  >;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutCustomerInput {
  id?: Maybe<ID_Input>;
  status: Boolean;
  menus?: Maybe<MenuCreateManyInput>;
  items?: Maybe<ItemCreateManyInput>;
  payment: PaymentCreateOneWithoutOrderInput;
}

export interface MenuCreateManyInput {
  create?: Maybe<MenuCreateInput[] | MenuCreateInput>;
  connect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
}

export interface MenuCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  price?: Maybe<Int>;
  restaurants?: Maybe<RestaurantCreateManyWithoutMenusInput>;
  filters?: Maybe<FilterCreateManyWithoutMenusInput>;
}

export interface RestaurantCreateManyWithoutMenusInput {
  create?: Maybe<
    RestaurantCreateWithoutMenusInput[] | RestaurantCreateWithoutMenusInput
  >;
  connect?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
}

export interface RestaurantCreateWithoutMenusInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  created?: Maybe<Boolean>;
  items?: Maybe<ItemCreateManyWithoutRestaurantsInput>;
  filters?: Maybe<FilterCreateManyWithoutRestaurantsInput>;
}

export interface ItemCreateManyWithoutRestaurantsInput {
  create?: Maybe<
    ItemCreateWithoutRestaurantsInput[] | ItemCreateWithoutRestaurantsInput
  >;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
}

export interface ItemCreateWithoutRestaurantsInput {
  id?: Maybe<ID_Input>;
  title: String;
  price?: Maybe<Int>;
  filters?: Maybe<FilterCreateManyWithoutItemsInput>;
}

export interface FilterCreateManyWithoutItemsInput {
  create?: Maybe<
    FilterCreateWithoutItemsInput[] | FilterCreateWithoutItemsInput
  >;
  connect?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
}

export interface FilterCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  name: String;
  menus?: Maybe<MenuCreateManyWithoutFiltersInput>;
  restaurants?: Maybe<RestaurantCreateManyWithoutFiltersInput>;
}

export interface MenuCreateManyWithoutFiltersInput {
  create?: Maybe<
    MenuCreateWithoutFiltersInput[] | MenuCreateWithoutFiltersInput
  >;
  connect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
}

export interface MenuCreateWithoutFiltersInput {
  id?: Maybe<ID_Input>;
  title: String;
  price?: Maybe<Int>;
  restaurants?: Maybe<RestaurantCreateManyWithoutMenusInput>;
}

export interface RestaurantCreateManyWithoutFiltersInput {
  create?: Maybe<
    RestaurantCreateWithoutFiltersInput[] | RestaurantCreateWithoutFiltersInput
  >;
  connect?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
}

export interface RestaurantCreateWithoutFiltersInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  created?: Maybe<Boolean>;
  menus?: Maybe<MenuCreateManyWithoutRestaurantsInput>;
  items?: Maybe<ItemCreateManyWithoutRestaurantsInput>;
}

export interface MenuCreateManyWithoutRestaurantsInput {
  create?: Maybe<
    MenuCreateWithoutRestaurantsInput[] | MenuCreateWithoutRestaurantsInput
  >;
  connect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
}

export interface MenuCreateWithoutRestaurantsInput {
  id?: Maybe<ID_Input>;
  title: String;
  price?: Maybe<Int>;
  filters?: Maybe<FilterCreateManyWithoutMenusInput>;
}

export interface FilterCreateManyWithoutMenusInput {
  create?: Maybe<
    FilterCreateWithoutMenusInput[] | FilterCreateWithoutMenusInput
  >;
  connect?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
}

export interface FilterCreateWithoutMenusInput {
  id?: Maybe<ID_Input>;
  name: String;
  items?: Maybe<ItemCreateManyWithoutFiltersInput>;
  restaurants?: Maybe<RestaurantCreateManyWithoutFiltersInput>;
}

export interface ItemCreateManyWithoutFiltersInput {
  create?: Maybe<
    ItemCreateWithoutFiltersInput[] | ItemCreateWithoutFiltersInput
  >;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
}

export interface ItemCreateWithoutFiltersInput {
  id?: Maybe<ID_Input>;
  title: String;
  price?: Maybe<Int>;
  restaurants?: Maybe<RestaurantCreateManyWithoutItemsInput>;
}

export interface RestaurantCreateManyWithoutItemsInput {
  create?: Maybe<
    RestaurantCreateWithoutItemsInput[] | RestaurantCreateWithoutItemsInput
  >;
  connect?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
}

export interface RestaurantCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  created?: Maybe<Boolean>;
  menus?: Maybe<MenuCreateManyWithoutRestaurantsInput>;
  filters?: Maybe<FilterCreateManyWithoutRestaurantsInput>;
}

export interface FilterCreateManyWithoutRestaurantsInput {
  create?: Maybe<
    FilterCreateWithoutRestaurantsInput[] | FilterCreateWithoutRestaurantsInput
  >;
  connect?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
}

export interface FilterCreateWithoutRestaurantsInput {
  id?: Maybe<ID_Input>;
  name: String;
  items?: Maybe<ItemCreateManyWithoutFiltersInput>;
  menus?: Maybe<MenuCreateManyWithoutFiltersInput>;
}

export interface ItemCreateManyInput {
  create?: Maybe<ItemCreateInput[] | ItemCreateInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
}

export interface ItemCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  price?: Maybe<Int>;
  restaurants?: Maybe<RestaurantCreateManyWithoutItemsInput>;
  filters?: Maybe<FilterCreateManyWithoutItemsInput>;
}

export interface PaymentCreateOneWithoutOrderInput {
  create?: Maybe<PaymentCreateWithoutOrderInput>;
  connect?: Maybe<PaymentWhereUniqueInput>;
}

export interface PaymentCreateWithoutOrderInput {
  id?: Maybe<ID_Input>;
  amount: Float;
  status: Boolean;
  type: String;
  codePayment: String;
}

export interface CustomerUpdateInput {
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  telephone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  created?: Maybe<Boolean>;
  orders?: Maybe<OrderUpdateManyWithoutCustomerInput>;
}

export interface OrderUpdateManyWithoutCustomerInput {
  create?: Maybe<
    OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput
  >;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    | OrderUpdateWithWhereUniqueWithoutCustomerInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    | OrderUpsertWithWhereUniqueWithoutCustomerInput
  >;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface OrderUpdateWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutCustomerDataInput;
}

export interface OrderUpdateWithoutCustomerDataInput {
  status?: Maybe<Boolean>;
  menus?: Maybe<MenuUpdateManyInput>;
  items?: Maybe<ItemUpdateManyInput>;
  payment?: Maybe<PaymentUpdateOneRequiredWithoutOrderInput>;
}

export interface MenuUpdateManyInput {
  create?: Maybe<MenuCreateInput[] | MenuCreateInput>;
  update?: Maybe<
    | MenuUpdateWithWhereUniqueNestedInput[]
    | MenuUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MenuUpsertWithWhereUniqueNestedInput[]
    | MenuUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  connect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  set?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  disconnect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  deleteMany?: Maybe<MenuScalarWhereInput[] | MenuScalarWhereInput>;
  updateMany?: Maybe<
    MenuUpdateManyWithWhereNestedInput[] | MenuUpdateManyWithWhereNestedInput
  >;
}

export interface MenuUpdateWithWhereUniqueNestedInput {
  where: MenuWhereUniqueInput;
  data: MenuUpdateDataInput;
}

export interface MenuUpdateDataInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  restaurants?: Maybe<RestaurantUpdateManyWithoutMenusInput>;
  filters?: Maybe<FilterUpdateManyWithoutMenusInput>;
}

export interface RestaurantUpdateManyWithoutMenusInput {
  create?: Maybe<
    RestaurantCreateWithoutMenusInput[] | RestaurantCreateWithoutMenusInput
  >;
  delete?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  connect?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  set?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  disconnect?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  update?: Maybe<
    | RestaurantUpdateWithWhereUniqueWithoutMenusInput[]
    | RestaurantUpdateWithWhereUniqueWithoutMenusInput
  >;
  upsert?: Maybe<
    | RestaurantUpsertWithWhereUniqueWithoutMenusInput[]
    | RestaurantUpsertWithWhereUniqueWithoutMenusInput
  >;
  deleteMany?: Maybe<RestaurantScalarWhereInput[] | RestaurantScalarWhereInput>;
  updateMany?: Maybe<
    | RestaurantUpdateManyWithWhereNestedInput[]
    | RestaurantUpdateManyWithWhereNestedInput
  >;
}

export interface RestaurantUpdateWithWhereUniqueWithoutMenusInput {
  where: RestaurantWhereUniqueInput;
  data: RestaurantUpdateWithoutMenusDataInput;
}

export interface RestaurantUpdateWithoutMenusDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  created?: Maybe<Boolean>;
  items?: Maybe<ItemUpdateManyWithoutRestaurantsInput>;
  filters?: Maybe<FilterUpdateManyWithoutRestaurantsInput>;
}

export interface ItemUpdateManyWithoutRestaurantsInput {
  create?: Maybe<
    ItemCreateWithoutRestaurantsInput[] | ItemCreateWithoutRestaurantsInput
  >;
  delete?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  set?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  disconnect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  update?: Maybe<
    | ItemUpdateWithWhereUniqueWithoutRestaurantsInput[]
    | ItemUpdateWithWhereUniqueWithoutRestaurantsInput
  >;
  upsert?: Maybe<
    | ItemUpsertWithWhereUniqueWithoutRestaurantsInput[]
    | ItemUpsertWithWhereUniqueWithoutRestaurantsInput
  >;
  deleteMany?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  updateMany?: Maybe<
    ItemUpdateManyWithWhereNestedInput[] | ItemUpdateManyWithWhereNestedInput
  >;
}

export interface ItemUpdateWithWhereUniqueWithoutRestaurantsInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateWithoutRestaurantsDataInput;
}

export interface ItemUpdateWithoutRestaurantsDataInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  filters?: Maybe<FilterUpdateManyWithoutItemsInput>;
}

export interface FilterUpdateManyWithoutItemsInput {
  create?: Maybe<
    FilterCreateWithoutItemsInput[] | FilterCreateWithoutItemsInput
  >;
  delete?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  connect?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  set?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  disconnect?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  update?: Maybe<
    | FilterUpdateWithWhereUniqueWithoutItemsInput[]
    | FilterUpdateWithWhereUniqueWithoutItemsInput
  >;
  upsert?: Maybe<
    | FilterUpsertWithWhereUniqueWithoutItemsInput[]
    | FilterUpsertWithWhereUniqueWithoutItemsInput
  >;
  deleteMany?: Maybe<FilterScalarWhereInput[] | FilterScalarWhereInput>;
  updateMany?: Maybe<
    | FilterUpdateManyWithWhereNestedInput[]
    | FilterUpdateManyWithWhereNestedInput
  >;
}

export interface FilterUpdateWithWhereUniqueWithoutItemsInput {
  where: FilterWhereUniqueInput;
  data: FilterUpdateWithoutItemsDataInput;
}

export interface FilterUpdateWithoutItemsDataInput {
  name?: Maybe<String>;
  menus?: Maybe<MenuUpdateManyWithoutFiltersInput>;
  restaurants?: Maybe<RestaurantUpdateManyWithoutFiltersInput>;
}

export interface MenuUpdateManyWithoutFiltersInput {
  create?: Maybe<
    MenuCreateWithoutFiltersInput[] | MenuCreateWithoutFiltersInput
  >;
  delete?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  connect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  set?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  disconnect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  update?: Maybe<
    | MenuUpdateWithWhereUniqueWithoutFiltersInput[]
    | MenuUpdateWithWhereUniqueWithoutFiltersInput
  >;
  upsert?: Maybe<
    | MenuUpsertWithWhereUniqueWithoutFiltersInput[]
    | MenuUpsertWithWhereUniqueWithoutFiltersInput
  >;
  deleteMany?: Maybe<MenuScalarWhereInput[] | MenuScalarWhereInput>;
  updateMany?: Maybe<
    MenuUpdateManyWithWhereNestedInput[] | MenuUpdateManyWithWhereNestedInput
  >;
}

export interface MenuUpdateWithWhereUniqueWithoutFiltersInput {
  where: MenuWhereUniqueInput;
  data: MenuUpdateWithoutFiltersDataInput;
}

export interface MenuUpdateWithoutFiltersDataInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  restaurants?: Maybe<RestaurantUpdateManyWithoutMenusInput>;
}

export interface MenuUpsertWithWhereUniqueWithoutFiltersInput {
  where: MenuWhereUniqueInput;
  update: MenuUpdateWithoutFiltersDataInput;
  create: MenuCreateWithoutFiltersInput;
}

export interface MenuScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  AND?: Maybe<MenuScalarWhereInput[] | MenuScalarWhereInput>;
  OR?: Maybe<MenuScalarWhereInput[] | MenuScalarWhereInput>;
  NOT?: Maybe<MenuScalarWhereInput[] | MenuScalarWhereInput>;
}

export interface MenuUpdateManyWithWhereNestedInput {
  where: MenuScalarWhereInput;
  data: MenuUpdateManyDataInput;
}

export interface MenuUpdateManyDataInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
}

export interface RestaurantUpdateManyWithoutFiltersInput {
  create?: Maybe<
    RestaurantCreateWithoutFiltersInput[] | RestaurantCreateWithoutFiltersInput
  >;
  delete?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  connect?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  set?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  disconnect?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  update?: Maybe<
    | RestaurantUpdateWithWhereUniqueWithoutFiltersInput[]
    | RestaurantUpdateWithWhereUniqueWithoutFiltersInput
  >;
  upsert?: Maybe<
    | RestaurantUpsertWithWhereUniqueWithoutFiltersInput[]
    | RestaurantUpsertWithWhereUniqueWithoutFiltersInput
  >;
  deleteMany?: Maybe<RestaurantScalarWhereInput[] | RestaurantScalarWhereInput>;
  updateMany?: Maybe<
    | RestaurantUpdateManyWithWhereNestedInput[]
    | RestaurantUpdateManyWithWhereNestedInput
  >;
}

export interface RestaurantUpdateWithWhereUniqueWithoutFiltersInput {
  where: RestaurantWhereUniqueInput;
  data: RestaurantUpdateWithoutFiltersDataInput;
}

export interface RestaurantUpdateWithoutFiltersDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  created?: Maybe<Boolean>;
  menus?: Maybe<MenuUpdateManyWithoutRestaurantsInput>;
  items?: Maybe<ItemUpdateManyWithoutRestaurantsInput>;
}

export interface MenuUpdateManyWithoutRestaurantsInput {
  create?: Maybe<
    MenuCreateWithoutRestaurantsInput[] | MenuCreateWithoutRestaurantsInput
  >;
  delete?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  connect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  set?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  disconnect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  update?: Maybe<
    | MenuUpdateWithWhereUniqueWithoutRestaurantsInput[]
    | MenuUpdateWithWhereUniqueWithoutRestaurantsInput
  >;
  upsert?: Maybe<
    | MenuUpsertWithWhereUniqueWithoutRestaurantsInput[]
    | MenuUpsertWithWhereUniqueWithoutRestaurantsInput
  >;
  deleteMany?: Maybe<MenuScalarWhereInput[] | MenuScalarWhereInput>;
  updateMany?: Maybe<
    MenuUpdateManyWithWhereNestedInput[] | MenuUpdateManyWithWhereNestedInput
  >;
}

export interface MenuUpdateWithWhereUniqueWithoutRestaurantsInput {
  where: MenuWhereUniqueInput;
  data: MenuUpdateWithoutRestaurantsDataInput;
}

export interface MenuUpdateWithoutRestaurantsDataInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  filters?: Maybe<FilterUpdateManyWithoutMenusInput>;
}

export interface FilterUpdateManyWithoutMenusInput {
  create?: Maybe<
    FilterCreateWithoutMenusInput[] | FilterCreateWithoutMenusInput
  >;
  delete?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  connect?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  set?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  disconnect?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  update?: Maybe<
    | FilterUpdateWithWhereUniqueWithoutMenusInput[]
    | FilterUpdateWithWhereUniqueWithoutMenusInput
  >;
  upsert?: Maybe<
    | FilterUpsertWithWhereUniqueWithoutMenusInput[]
    | FilterUpsertWithWhereUniqueWithoutMenusInput
  >;
  deleteMany?: Maybe<FilterScalarWhereInput[] | FilterScalarWhereInput>;
  updateMany?: Maybe<
    | FilterUpdateManyWithWhereNestedInput[]
    | FilterUpdateManyWithWhereNestedInput
  >;
}

export interface FilterUpdateWithWhereUniqueWithoutMenusInput {
  where: FilterWhereUniqueInput;
  data: FilterUpdateWithoutMenusDataInput;
}

export interface FilterUpdateWithoutMenusDataInput {
  name?: Maybe<String>;
  items?: Maybe<ItemUpdateManyWithoutFiltersInput>;
  restaurants?: Maybe<RestaurantUpdateManyWithoutFiltersInput>;
}

export interface ItemUpdateManyWithoutFiltersInput {
  create?: Maybe<
    ItemCreateWithoutFiltersInput[] | ItemCreateWithoutFiltersInput
  >;
  delete?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  set?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  disconnect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  update?: Maybe<
    | ItemUpdateWithWhereUniqueWithoutFiltersInput[]
    | ItemUpdateWithWhereUniqueWithoutFiltersInput
  >;
  upsert?: Maybe<
    | ItemUpsertWithWhereUniqueWithoutFiltersInput[]
    | ItemUpsertWithWhereUniqueWithoutFiltersInput
  >;
  deleteMany?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  updateMany?: Maybe<
    ItemUpdateManyWithWhereNestedInput[] | ItemUpdateManyWithWhereNestedInput
  >;
}

export interface ItemUpdateWithWhereUniqueWithoutFiltersInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateWithoutFiltersDataInput;
}

export interface ItemUpdateWithoutFiltersDataInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  restaurants?: Maybe<RestaurantUpdateManyWithoutItemsInput>;
}

export interface RestaurantUpdateManyWithoutItemsInput {
  create?: Maybe<
    RestaurantCreateWithoutItemsInput[] | RestaurantCreateWithoutItemsInput
  >;
  delete?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  connect?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  set?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  disconnect?: Maybe<RestaurantWhereUniqueInput[] | RestaurantWhereUniqueInput>;
  update?: Maybe<
    | RestaurantUpdateWithWhereUniqueWithoutItemsInput[]
    | RestaurantUpdateWithWhereUniqueWithoutItemsInput
  >;
  upsert?: Maybe<
    | RestaurantUpsertWithWhereUniqueWithoutItemsInput[]
    | RestaurantUpsertWithWhereUniqueWithoutItemsInput
  >;
  deleteMany?: Maybe<RestaurantScalarWhereInput[] | RestaurantScalarWhereInput>;
  updateMany?: Maybe<
    | RestaurantUpdateManyWithWhereNestedInput[]
    | RestaurantUpdateManyWithWhereNestedInput
  >;
}

export interface RestaurantUpdateWithWhereUniqueWithoutItemsInput {
  where: RestaurantWhereUniqueInput;
  data: RestaurantUpdateWithoutItemsDataInput;
}

export interface RestaurantUpdateWithoutItemsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  created?: Maybe<Boolean>;
  menus?: Maybe<MenuUpdateManyWithoutRestaurantsInput>;
  filters?: Maybe<FilterUpdateManyWithoutRestaurantsInput>;
}

export interface FilterUpdateManyWithoutRestaurantsInput {
  create?: Maybe<
    FilterCreateWithoutRestaurantsInput[] | FilterCreateWithoutRestaurantsInput
  >;
  delete?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  connect?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  set?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  disconnect?: Maybe<FilterWhereUniqueInput[] | FilterWhereUniqueInput>;
  update?: Maybe<
    | FilterUpdateWithWhereUniqueWithoutRestaurantsInput[]
    | FilterUpdateWithWhereUniqueWithoutRestaurantsInput
  >;
  upsert?: Maybe<
    | FilterUpsertWithWhereUniqueWithoutRestaurantsInput[]
    | FilterUpsertWithWhereUniqueWithoutRestaurantsInput
  >;
  deleteMany?: Maybe<FilterScalarWhereInput[] | FilterScalarWhereInput>;
  updateMany?: Maybe<
    | FilterUpdateManyWithWhereNestedInput[]
    | FilterUpdateManyWithWhereNestedInput
  >;
}

export interface FilterUpdateWithWhereUniqueWithoutRestaurantsInput {
  where: FilterWhereUniqueInput;
  data: FilterUpdateWithoutRestaurantsDataInput;
}

export interface FilterUpdateWithoutRestaurantsDataInput {
  name?: Maybe<String>;
  items?: Maybe<ItemUpdateManyWithoutFiltersInput>;
  menus?: Maybe<MenuUpdateManyWithoutFiltersInput>;
}

export interface FilterUpsertWithWhereUniqueWithoutRestaurantsInput {
  where: FilterWhereUniqueInput;
  update: FilterUpdateWithoutRestaurantsDataInput;
  create: FilterCreateWithoutRestaurantsInput;
}

export interface FilterScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<FilterScalarWhereInput[] | FilterScalarWhereInput>;
  OR?: Maybe<FilterScalarWhereInput[] | FilterScalarWhereInput>;
  NOT?: Maybe<FilterScalarWhereInput[] | FilterScalarWhereInput>;
}

export interface FilterUpdateManyWithWhereNestedInput {
  where: FilterScalarWhereInput;
  data: FilterUpdateManyDataInput;
}

export interface FilterUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface RestaurantUpsertWithWhereUniqueWithoutItemsInput {
  where: RestaurantWhereUniqueInput;
  update: RestaurantUpdateWithoutItemsDataInput;
  create: RestaurantCreateWithoutItemsInput;
}

export interface RestaurantScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  created?: Maybe<Boolean>;
  created_not?: Maybe<Boolean>;
  AND?: Maybe<RestaurantScalarWhereInput[] | RestaurantScalarWhereInput>;
  OR?: Maybe<RestaurantScalarWhereInput[] | RestaurantScalarWhereInput>;
  NOT?: Maybe<RestaurantScalarWhereInput[] | RestaurantScalarWhereInput>;
}

export interface RestaurantUpdateManyWithWhereNestedInput {
  where: RestaurantScalarWhereInput;
  data: RestaurantUpdateManyDataInput;
}

export interface RestaurantUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  created?: Maybe<Boolean>;
}

export interface ItemUpsertWithWhereUniqueWithoutFiltersInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateWithoutFiltersDataInput;
  create: ItemCreateWithoutFiltersInput;
}

export interface ItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  AND?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  OR?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  NOT?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
}

export interface ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput;
  data: ItemUpdateManyDataInput;
}

export interface ItemUpdateManyDataInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
}

export interface FilterUpsertWithWhereUniqueWithoutMenusInput {
  where: FilterWhereUniqueInput;
  update: FilterUpdateWithoutMenusDataInput;
  create: FilterCreateWithoutMenusInput;
}

export interface MenuUpsertWithWhereUniqueWithoutRestaurantsInput {
  where: MenuWhereUniqueInput;
  update: MenuUpdateWithoutRestaurantsDataInput;
  create: MenuCreateWithoutRestaurantsInput;
}

export interface RestaurantUpsertWithWhereUniqueWithoutFiltersInput {
  where: RestaurantWhereUniqueInput;
  update: RestaurantUpdateWithoutFiltersDataInput;
  create: RestaurantCreateWithoutFiltersInput;
}

export interface FilterUpsertWithWhereUniqueWithoutItemsInput {
  where: FilterWhereUniqueInput;
  update: FilterUpdateWithoutItemsDataInput;
  create: FilterCreateWithoutItemsInput;
}

export interface ItemUpsertWithWhereUniqueWithoutRestaurantsInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateWithoutRestaurantsDataInput;
  create: ItemCreateWithoutRestaurantsInput;
}

export interface RestaurantUpsertWithWhereUniqueWithoutMenusInput {
  where: RestaurantWhereUniqueInput;
  update: RestaurantUpdateWithoutMenusDataInput;
  create: RestaurantCreateWithoutMenusInput;
}

export interface MenuUpsertWithWhereUniqueNestedInput {
  where: MenuWhereUniqueInput;
  update: MenuUpdateDataInput;
  create: MenuCreateInput;
}

export interface ItemUpdateManyInput {
  create?: Maybe<ItemCreateInput[] | ItemCreateInput>;
  update?: Maybe<
    | ItemUpdateWithWhereUniqueNestedInput[]
    | ItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ItemUpsertWithWhereUniqueNestedInput[]
    | ItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  connect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  set?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  disconnect?: Maybe<ItemWhereUniqueInput[] | ItemWhereUniqueInput>;
  deleteMany?: Maybe<ItemScalarWhereInput[] | ItemScalarWhereInput>;
  updateMany?: Maybe<
    ItemUpdateManyWithWhereNestedInput[] | ItemUpdateManyWithWhereNestedInput
  >;
}

export interface ItemUpdateWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  data: ItemUpdateDataInput;
}

export interface ItemUpdateDataInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  restaurants?: Maybe<RestaurantUpdateManyWithoutItemsInput>;
  filters?: Maybe<FilterUpdateManyWithoutItemsInput>;
}

export interface ItemUpsertWithWhereUniqueNestedInput {
  where: ItemWhereUniqueInput;
  update: ItemUpdateDataInput;
  create: ItemCreateInput;
}

export interface PaymentUpdateOneRequiredWithoutOrderInput {
  create?: Maybe<PaymentCreateWithoutOrderInput>;
  update?: Maybe<PaymentUpdateWithoutOrderDataInput>;
  upsert?: Maybe<PaymentUpsertWithoutOrderInput>;
  connect?: Maybe<PaymentWhereUniqueInput>;
}

export interface PaymentUpdateWithoutOrderDataInput {
  amount?: Maybe<Float>;
  status?: Maybe<Boolean>;
  type?: Maybe<String>;
  codePayment?: Maybe<String>;
}

export interface PaymentUpsertWithoutOrderInput {
  update: PaymentUpdateWithoutOrderDataInput;
  create: PaymentCreateWithoutOrderInput;
}

export interface OrderUpsertWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutCustomerDataInput;
  create: OrderCreateWithoutCustomerInput;
}

export interface OrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  AND?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  OR?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  NOT?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface OrderUpdateManyDataInput {
  status?: Maybe<Boolean>;
}

export interface CustomerUpdateManyMutationInput {
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  telephone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  created?: Maybe<Boolean>;
}

export interface FilterCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  items?: Maybe<ItemCreateManyWithoutFiltersInput>;
  menus?: Maybe<MenuCreateManyWithoutFiltersInput>;
  restaurants?: Maybe<RestaurantCreateManyWithoutFiltersInput>;
}

export interface FilterUpdateInput {
  name?: Maybe<String>;
  items?: Maybe<ItemUpdateManyWithoutFiltersInput>;
  menus?: Maybe<MenuUpdateManyWithoutFiltersInput>;
  restaurants?: Maybe<RestaurantUpdateManyWithoutFiltersInput>;
}

export interface FilterUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface ItemUpdateInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  restaurants?: Maybe<RestaurantUpdateManyWithoutItemsInput>;
  filters?: Maybe<FilterUpdateManyWithoutItemsInput>;
}

export interface ItemUpdateManyMutationInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
}

export interface MenuUpdateInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  restaurants?: Maybe<RestaurantUpdateManyWithoutMenusInput>;
  filters?: Maybe<FilterUpdateManyWithoutMenusInput>;
}

export interface MenuUpdateManyMutationInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
}

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  status: Boolean;
  menus?: Maybe<MenuCreateManyInput>;
  items?: Maybe<ItemCreateManyInput>;
  customer: CustomerCreateOneWithoutOrdersInput;
  payment: PaymentCreateOneWithoutOrderInput;
}

export interface CustomerCreateOneWithoutOrdersInput {
  create?: Maybe<CustomerCreateWithoutOrdersInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerCreateWithoutOrdersInput {
  id?: Maybe<ID_Input>;
  first_name: String;
  last_name: String;
  birthday: DateTimeInput;
  telephone: String;
  email: String;
  password: String;
  role?: Maybe<Role>;
  created?: Maybe<Boolean>;
}

export interface OrderUpdateInput {
  status?: Maybe<Boolean>;
  menus?: Maybe<MenuUpdateManyInput>;
  items?: Maybe<ItemUpdateManyInput>;
  customer?: Maybe<CustomerUpdateOneRequiredWithoutOrdersInput>;
  payment?: Maybe<PaymentUpdateOneRequiredWithoutOrderInput>;
}

export interface CustomerUpdateOneRequiredWithoutOrdersInput {
  create?: Maybe<CustomerCreateWithoutOrdersInput>;
  update?: Maybe<CustomerUpdateWithoutOrdersDataInput>;
  upsert?: Maybe<CustomerUpsertWithoutOrdersInput>;
  connect?: Maybe<CustomerWhereUniqueInput>;
}

export interface CustomerUpdateWithoutOrdersDataInput {
  first_name?: Maybe<String>;
  last_name?: Maybe<String>;
  birthday?: Maybe<DateTimeInput>;
  telephone?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  created?: Maybe<Boolean>;
}

export interface CustomerUpsertWithoutOrdersInput {
  update: CustomerUpdateWithoutOrdersDataInput;
  create: CustomerCreateWithoutOrdersInput;
}

export interface OrderUpdateManyMutationInput {
  status?: Maybe<Boolean>;
}

export interface PaymentCreateInput {
  id?: Maybe<ID_Input>;
  amount: Float;
  status: Boolean;
  type: String;
  codePayment: String;
  order: OrderCreateOneWithoutPaymentInput;
}

export interface OrderCreateOneWithoutPaymentInput {
  create?: Maybe<OrderCreateWithoutPaymentInput>;
  connect?: Maybe<OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutPaymentInput {
  id?: Maybe<ID_Input>;
  status: Boolean;
  menus?: Maybe<MenuCreateManyInput>;
  items?: Maybe<ItemCreateManyInput>;
  customer: CustomerCreateOneWithoutOrdersInput;
}

export interface PaymentUpdateInput {
  amount?: Maybe<Float>;
  status?: Maybe<Boolean>;
  type?: Maybe<String>;
  codePayment?: Maybe<String>;
  order?: Maybe<OrderUpdateOneRequiredWithoutPaymentInput>;
}

export interface OrderUpdateOneRequiredWithoutPaymentInput {
  create?: Maybe<OrderCreateWithoutPaymentInput>;
  update?: Maybe<OrderUpdateWithoutPaymentDataInput>;
  upsert?: Maybe<OrderUpsertWithoutPaymentInput>;
  connect?: Maybe<OrderWhereUniqueInput>;
}

export interface OrderUpdateWithoutPaymentDataInput {
  status?: Maybe<Boolean>;
  menus?: Maybe<MenuUpdateManyInput>;
  items?: Maybe<ItemUpdateManyInput>;
  customer?: Maybe<CustomerUpdateOneRequiredWithoutOrdersInput>;
}

export interface OrderUpsertWithoutPaymentInput {
  update: OrderUpdateWithoutPaymentDataInput;
  create: OrderCreateWithoutPaymentInput;
}

export interface PaymentUpdateManyMutationInput {
  amount?: Maybe<Float>;
  status?: Maybe<Boolean>;
  type?: Maybe<String>;
  codePayment?: Maybe<String>;
}

export interface RestaurantCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  created?: Maybe<Boolean>;
  menus?: Maybe<MenuCreateManyWithoutRestaurantsInput>;
  items?: Maybe<ItemCreateManyWithoutRestaurantsInput>;
  filters?: Maybe<FilterCreateManyWithoutRestaurantsInput>;
}

export interface RestaurantUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  created?: Maybe<Boolean>;
  menus?: Maybe<MenuUpdateManyWithoutRestaurantsInput>;
  items?: Maybe<ItemUpdateManyWithoutRestaurantsInput>;
  filters?: Maybe<FilterUpdateManyWithoutRestaurantsInput>;
}

export interface RestaurantUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  created?: Maybe<Boolean>;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
  OR?: Maybe<CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput>;
  NOT?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface FilterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FilterWhereInput>;
  AND?: Maybe<FilterSubscriptionWhereInput[] | FilterSubscriptionWhereInput>;
  OR?: Maybe<FilterSubscriptionWhereInput[] | FilterSubscriptionWhereInput>;
  NOT?: Maybe<FilterSubscriptionWhereInput[] | FilterSubscriptionWhereInput>;
}

export interface ItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ItemWhereInput>;
  AND?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  OR?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
  NOT?: Maybe<ItemSubscriptionWhereInput[] | ItemSubscriptionWhereInput>;
}

export interface MenuSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MenuWhereInput>;
  AND?: Maybe<MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput>;
  OR?: Maybe<MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput>;
  NOT?: Maybe<MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface PaymentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PaymentWhereInput>;
  AND?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  OR?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  NOT?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
}

export interface RestaurantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RestaurantWhereInput>;
  AND?: Maybe<
    RestaurantSubscriptionWhereInput[] | RestaurantSubscriptionWhereInput
  >;
  OR?: Maybe<
    RestaurantSubscriptionWhereInput[] | RestaurantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    RestaurantSubscriptionWhereInput[] | RestaurantSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Customer {
  id: ID_Output;
  first_name: String;
  last_name: String;
  birthday: DateTimeOutput;
  telephone: String;
  email: String;
  password: String;
  role?: Role;
  created: Boolean;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  telephone: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  created: () => Promise<Boolean>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  telephone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  created: () => Promise<AsyncIterator<Boolean>>;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  telephone: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  created: () => Promise<Boolean>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Order {
  id: ID_Output;
  status: Boolean;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<Boolean>;
  menus: <T = FragmentableArray<Menu>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customer: <T = CustomerPromise>() => T;
  payment: <T = PaymentPromise>() => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  menus: <T = Promise<AsyncIterator<MenuSubscription>>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customer: <T = CustomerSubscription>() => T;
  payment: <T = PaymentSubscription>() => T;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<Boolean>;
  menus: <T = FragmentableArray<Menu>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customer: <T = CustomerPromise>() => T;
  payment: <T = PaymentPromise>() => T;
}

export interface Menu {
  id: ID_Output;
  title: String;
  price?: Int;
}

export interface MenuPromise extends Promise<Menu>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  price: () => Promise<Int>;
  restaurants: <T = FragmentableArray<Restaurant>>(args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  filters: <T = FragmentableArray<Filter>>(args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MenuSubscription
  extends Promise<AsyncIterator<Menu>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  restaurants: <T = Promise<AsyncIterator<RestaurantSubscription>>>(args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  filters: <T = Promise<AsyncIterator<FilterSubscription>>>(args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MenuNullablePromise
  extends Promise<Menu | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  price: () => Promise<Int>;
  restaurants: <T = FragmentableArray<Restaurant>>(args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  filters: <T = FragmentableArray<Filter>>(args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Restaurant {
  id: ID_Output;
  name: String;
  description: String;
  created: Boolean;
}

export interface RestaurantPromise extends Promise<Restaurant>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  created: () => Promise<Boolean>;
  menus: <T = FragmentableArray<Menu>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  filters: <T = FragmentableArray<Filter>>(args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RestaurantSubscription
  extends Promise<AsyncIterator<Restaurant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<Boolean>>;
  menus: <T = Promise<AsyncIterator<MenuSubscription>>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  filters: <T = Promise<AsyncIterator<FilterSubscription>>>(args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RestaurantNullablePromise
  extends Promise<Restaurant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  created: () => Promise<Boolean>;
  menus: <T = FragmentableArray<Menu>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  filters: <T = FragmentableArray<Filter>>(args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Item {
  id: ID_Output;
  title: String;
  price?: Int;
}

export interface ItemPromise extends Promise<Item>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  price: () => Promise<Int>;
  restaurants: <T = FragmentableArray<Restaurant>>(args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  filters: <T = FragmentableArray<Filter>>(args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ItemSubscription
  extends Promise<AsyncIterator<Item>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  restaurants: <T = Promise<AsyncIterator<RestaurantSubscription>>>(args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  filters: <T = Promise<AsyncIterator<FilterSubscription>>>(args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ItemNullablePromise
  extends Promise<Item | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  price: () => Promise<Int>;
  restaurants: <T = FragmentableArray<Restaurant>>(args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  filters: <T = FragmentableArray<Filter>>(args?: {
    where?: FilterWhereInput;
    orderBy?: FilterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Filter {
  id: ID_Output;
  name: String;
}

export interface FilterPromise extends Promise<Filter>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menus: <T = FragmentableArray<Menu>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  restaurants: <T = FragmentableArray<Restaurant>>(args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FilterSubscription
  extends Promise<AsyncIterator<Filter>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  items: <T = Promise<AsyncIterator<ItemSubscription>>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menus: <T = Promise<AsyncIterator<MenuSubscription>>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  restaurants: <T = Promise<AsyncIterator<RestaurantSubscription>>>(args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FilterNullablePromise
  extends Promise<Filter | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  items: <T = FragmentableArray<Item>>(args?: {
    where?: ItemWhereInput;
    orderBy?: ItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menus: <T = FragmentableArray<Menu>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  restaurants: <T = FragmentableArray<Restaurant>>(args?: {
    where?: RestaurantWhereInput;
    orderBy?: RestaurantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Payment {
  id: ID_Output;
  amount: Float;
  status: Boolean;
  type: String;
  codePayment: String;
}

export interface PaymentPromise extends Promise<Payment>, Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  status: () => Promise<Boolean>;
  type: () => Promise<String>;
  codePayment: () => Promise<String>;
  order: <T = OrderPromise>() => T;
}

export interface PaymentSubscription
  extends Promise<AsyncIterator<Payment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<String>>;
  codePayment: () => Promise<AsyncIterator<String>>;
  order: <T = OrderSubscription>() => T;
}

export interface PaymentNullablePromise
  extends Promise<Payment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  status: () => Promise<Boolean>;
  type: () => Promise<String>;
  codePayment: () => Promise<String>;
  order: <T = OrderPromise>() => T;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FilterConnection {
  pageInfo: PageInfo;
  edges: FilterEdge[];
}

export interface FilterConnectionPromise
  extends Promise<FilterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FilterEdge>>() => T;
  aggregate: <T = AggregateFilterPromise>() => T;
}

export interface FilterConnectionSubscription
  extends Promise<AsyncIterator<FilterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FilterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFilterSubscription>() => T;
}

export interface FilterEdge {
  node: Filter;
  cursor: String;
}

export interface FilterEdgePromise extends Promise<FilterEdge>, Fragmentable {
  node: <T = FilterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FilterEdgeSubscription
  extends Promise<AsyncIterator<FilterEdge>>,
    Fragmentable {
  node: <T = FilterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFilter {
  count: Int;
}

export interface AggregateFilterPromise
  extends Promise<AggregateFilter>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFilterSubscription
  extends Promise<AsyncIterator<AggregateFilter>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ItemConnection {
  pageInfo: PageInfo;
  edges: ItemEdge[];
}

export interface ItemConnectionPromise
  extends Promise<ItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ItemEdge>>() => T;
  aggregate: <T = AggregateItemPromise>() => T;
}

export interface ItemConnectionSubscription
  extends Promise<AsyncIterator<ItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateItemSubscription>() => T;
}

export interface ItemEdge {
  node: Item;
  cursor: String;
}

export interface ItemEdgePromise extends Promise<ItemEdge>, Fragmentable {
  node: <T = ItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ItemEdgeSubscription
  extends Promise<AsyncIterator<ItemEdge>>,
    Fragmentable {
  node: <T = ItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateItem {
  count: Int;
}

export interface AggregateItemPromise
  extends Promise<AggregateItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateItemSubscription
  extends Promise<AsyncIterator<AggregateItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MenuConnection {
  pageInfo: PageInfo;
  edges: MenuEdge[];
}

export interface MenuConnectionPromise
  extends Promise<MenuConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MenuEdge>>() => T;
  aggregate: <T = AggregateMenuPromise>() => T;
}

export interface MenuConnectionSubscription
  extends Promise<AsyncIterator<MenuConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MenuEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMenuSubscription>() => T;
}

export interface MenuEdge {
  node: Menu;
  cursor: String;
}

export interface MenuEdgePromise extends Promise<MenuEdge>, Fragmentable {
  node: <T = MenuPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MenuEdgeSubscription
  extends Promise<AsyncIterator<MenuEdge>>,
    Fragmentable {
  node: <T = MenuSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMenu {
  count: Int;
}

export interface AggregateMenuPromise
  extends Promise<AggregateMenu>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMenuSubscription
  extends Promise<AsyncIterator<AggregateMenu>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PaymentConnection {
  pageInfo: PageInfo;
  edges: PaymentEdge[];
}

export interface PaymentConnectionPromise
  extends Promise<PaymentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PaymentEdge>>() => T;
  aggregate: <T = AggregatePaymentPromise>() => T;
}

export interface PaymentConnectionSubscription
  extends Promise<AsyncIterator<PaymentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PaymentEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePaymentSubscription>() => T;
}

export interface PaymentEdge {
  node: Payment;
  cursor: String;
}

export interface PaymentEdgePromise extends Promise<PaymentEdge>, Fragmentable {
  node: <T = PaymentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PaymentEdgeSubscription
  extends Promise<AsyncIterator<PaymentEdge>>,
    Fragmentable {
  node: <T = PaymentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePayment {
  count: Int;
}

export interface AggregatePaymentPromise
  extends Promise<AggregatePayment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePaymentSubscription
  extends Promise<AsyncIterator<AggregatePayment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RestaurantConnection {
  pageInfo: PageInfo;
  edges: RestaurantEdge[];
}

export interface RestaurantConnectionPromise
  extends Promise<RestaurantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RestaurantEdge>>() => T;
  aggregate: <T = AggregateRestaurantPromise>() => T;
}

export interface RestaurantConnectionSubscription
  extends Promise<AsyncIterator<RestaurantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RestaurantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRestaurantSubscription>() => T;
}

export interface RestaurantEdge {
  node: Restaurant;
  cursor: String;
}

export interface RestaurantEdgePromise
  extends Promise<RestaurantEdge>,
    Fragmentable {
  node: <T = RestaurantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RestaurantEdgeSubscription
  extends Promise<AsyncIterator<RestaurantEdge>>,
    Fragmentable {
  node: <T = RestaurantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRestaurant {
  count: Int;
}

export interface AggregateRestaurantPromise
  extends Promise<AggregateRestaurant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRestaurantSubscription
  extends Promise<AsyncIterator<AggregateRestaurant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  first_name: String;
  last_name: String;
  birthday: DateTimeOutput;
  telephone: String;
  email: String;
  password: String;
  role?: Role;
  created: Boolean;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  birthday: () => Promise<DateTimeOutput>;
  telephone: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  created: () => Promise<Boolean>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  birthday: () => Promise<AsyncIterator<DateTimeOutput>>;
  telephone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  created: () => Promise<AsyncIterator<Boolean>>;
}

export interface FilterSubscriptionPayload {
  mutation: MutationType;
  node: Filter;
  updatedFields: String[];
  previousValues: FilterPreviousValues;
}

export interface FilterSubscriptionPayloadPromise
  extends Promise<FilterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilterPreviousValuesPromise>() => T;
}

export interface FilterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FilterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FilterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilterPreviousValuesSubscription>() => T;
}

export interface FilterPreviousValues {
  id: ID_Output;
  name: String;
}

export interface FilterPreviousValuesPromise
  extends Promise<FilterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface FilterPreviousValuesSubscription
  extends Promise<AsyncIterator<FilterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ItemSubscriptionPayload {
  mutation: MutationType;
  node: Item;
  updatedFields: String[];
  previousValues: ItemPreviousValues;
}

export interface ItemSubscriptionPayloadPromise
  extends Promise<ItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ItemPreviousValuesPromise>() => T;
}

export interface ItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ItemPreviousValuesSubscription>() => T;
}

export interface ItemPreviousValues {
  id: ID_Output;
  title: String;
  price?: Int;
}

export interface ItemPreviousValuesPromise
  extends Promise<ItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  price: () => Promise<Int>;
}

export interface ItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
}

export interface MenuSubscriptionPayload {
  mutation: MutationType;
  node: Menu;
  updatedFields: String[];
  previousValues: MenuPreviousValues;
}

export interface MenuSubscriptionPayloadPromise
  extends Promise<MenuSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MenuPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MenuPreviousValuesPromise>() => T;
}

export interface MenuSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MenuSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MenuSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MenuPreviousValuesSubscription>() => T;
}

export interface MenuPreviousValues {
  id: ID_Output;
  title: String;
  price?: Int;
}

export interface MenuPreviousValuesPromise
  extends Promise<MenuPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  price: () => Promise<Int>;
}

export interface MenuPreviousValuesSubscription
  extends Promise<AsyncIterator<MenuPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  status: Boolean;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<Boolean>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<Boolean>>;
}

export interface PaymentSubscriptionPayload {
  mutation: MutationType;
  node: Payment;
  updatedFields: String[];
  previousValues: PaymentPreviousValues;
}

export interface PaymentSubscriptionPayloadPromise
  extends Promise<PaymentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PaymentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PaymentPreviousValuesPromise>() => T;
}

export interface PaymentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PaymentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PaymentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PaymentPreviousValuesSubscription>() => T;
}

export interface PaymentPreviousValues {
  id: ID_Output;
  amount: Float;
  status: Boolean;
  type: String;
  codePayment: String;
}

export interface PaymentPreviousValuesPromise
  extends Promise<PaymentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  status: () => Promise<Boolean>;
  type: () => Promise<String>;
  codePayment: () => Promise<String>;
}

export interface PaymentPreviousValuesSubscription
  extends Promise<AsyncIterator<PaymentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<String>>;
  codePayment: () => Promise<AsyncIterator<String>>;
}

export interface RestaurantSubscriptionPayload {
  mutation: MutationType;
  node: Restaurant;
  updatedFields: String[];
  previousValues: RestaurantPreviousValues;
}

export interface RestaurantSubscriptionPayloadPromise
  extends Promise<RestaurantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RestaurantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RestaurantPreviousValuesPromise>() => T;
}

export interface RestaurantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RestaurantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RestaurantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RestaurantPreviousValuesSubscription>() => T;
}

export interface RestaurantPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  created: Boolean;
}

export interface RestaurantPreviousValuesPromise
  extends Promise<RestaurantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  created: () => Promise<Boolean>;
}

export interface RestaurantPreviousValuesSubscription
  extends Promise<AsyncIterator<RestaurantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  created: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "ApprovalProcess",
    embedded: false
  },
  {
    name: "Customer",
    embedded: false
  },
  {
    name: "Item",
    embedded: false
  },
  {
    name: "Menu",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "Payment",
    embedded: false
  },
  {
    name: "Restaurant",
    embedded: false
  },
  {
    name: "Filter",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
